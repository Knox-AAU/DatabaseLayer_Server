basePath: /
consumes:
    - application/json
definitions:
    BindingAttribute:
        properties:
            Type:
                type: string
            Value:
                type: string
        type: object
        x-go-package: github.com/Knox-AAU/DatabaseLayer_Server/pkg/graph
    GetTriple:
        properties:
            o:
                $ref: '#/definitions/BindingAttribute'
            p:
                $ref: '#/definitions/BindingAttribute'
            s:
                $ref: '#/definitions/BindingAttribute'
        title: GetTriple requires the json tags to match with the queries that are used to retrieve it.
        type: object
        x-go-package: github.com/Knox-AAU/DatabaseLayer_Server/pkg/graph
    PostBody:
        properties:
            triples:
                description: |-
                    Triples is an array of triples.
                    Each triple's first element is the subject, second is the predicate and third is the object.
                    Only accepts exactly 3 elements per triple.
                items:
                    items:
                        type: string
                    type: array
                type: array
                x-go-name: Triples
        required:
            - triples
        type: object
        x-go-package: github.com/Knox-AAU/DatabaseLayer_Server/pkg/graph
    Result:
        properties:
            query:
                type: string
                x-go-name: Query
            triples:
                items:
                    $ref: '#/definitions/GetTriple'
                type: array
                x-go-name: Triples
        type: object
        x-go-package: github.com/Knox-AAU/DatabaseLayer_Server/pkg/http/rest
host: http://192.38.54.90
info:
    description: REST API for the KNOX database.
    title: Database Layer Server API.
paths:
    /triples:
        get:
            description: |-
                To query the whole graph, leave parameters empty.
                Example: /triples?g=http://knox_database&s=subjekt1&s=subjekt2&o=object1&p=predicate1
            operationId: getTriples
            parameters:
                - description: Target graph of the query. Currently (http://knox_ontology, http://knox_database) are valid graphs, but this could change in the future. Error responses will always contain the valid graphs, so you can just send an empty request to get the valid graphs.
                  example: http://knox_database
                  in: query
                  name: g
                  required: true
                  type: string
                - description: Subjects
                  in: query
                  items:
                    type: string
                  name: s
                  type: array
                - description: Objects
                  in: query
                  items:
                    type: string
                  name: o
                  type: array
                - description: Predicates
                  in: query
                  items:
                    type: string
                  name: p
                  type: array
            produces:
                - application/json
            responses:
                "200":
                    description: filtered triples response
                    schema:
                        $ref: '#/definitions/Result'
            summary: Query graph applying filters.
        post:
            description: If a new predicate is sent with an existing subject, will the existing subject be updated with the new predicate.
            operationId: UpsertTriples
            parameters:
                - description: Target graph of the query. Only valid graphs will be accepted. If the graph does not exist, the error response will contain the valid graphs.
                  example: http://knox_database
                  in: query
                  name: g
                  required: true
                  type: string
                - description: Triples to upsert
                  example:
                    triples:
                        - object: http://knox_database/object1
                          predicate: http://knox_database/predicate1
                          subject: http://knox_database/subject1
                        - object: http://knox_database/object2
                          predicate: http://knox_database/predicate2
                          subject: http://knox_database/subject2
                  in: body
                  name: triples
                  required: true
                  schema:
                    $ref: '#/definitions/PostBody'
            produces:
                - application/json
            responses:
                "200":
                    description: response with produced query and null value for triples
                    schema:
                        $ref: '#/definitions/Result'
            summary: This endpoint upserts triples.
produces:
    - application/json
schemes:
    - http
swagger: "2.0"
