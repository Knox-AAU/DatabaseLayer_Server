# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Test

on:
  push:
    branches-ignore:
      - "main" # Ignore main

env:
  VIRTUOSO_SERVER_URL: ${{ secrets.VIRTUOSO_SERVER_URL }}

jobs:
  setup:
    runs-on: ubuntu-latest
    services:
      virtuoso:
        image: openlink/virtuoso-opensource-7:latest
        env:
          DBA_PASSWORD: qzu49svh
        ports:
          - 1111:1111
          - 8890:8890
        options: --name knox_virtuoso_db --volume "${{ github.workspace }}/knox_virtuoso_db:/database"

    steps:
      - name: setup permissions for deletion after
        run: sudo chown -R ${{ runner.user }}:$${ runner.group }} "${{ github.workspace}}/knox_virtuoso_db"

      # ...your existing job steps...
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Setup RDF data
      #   run: |
      #     curl -d "uid=dba&pwd=yourPassword&query=INSERT DATA { GRAPH http://example.com { http://example.com/s http://example.com/p http://example.com/o } }" -H "Accept: application/sparql-results+json" http://localhost:8890/sparql

      - name: Checkout
        uses: actions/checkout@v2

      # - name: Healthcheck for Virtuoso
      #   run: |
      #     until $(curl --output /dev/null --silent --head -- fail http://localhost:8890); do
      #         echo "Waiting for Virtuoso..."
      #         sleep 5
      #     done

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Run Go Tests
        run: go test ./...

      - name: Delete database files
        if: always()
        run: |
          sudo rm -rf "${{ github.workspace}}/knox_virtuoso_db"
